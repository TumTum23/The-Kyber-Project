{
  "language": "Solidity",
  "sources": {
    "contracts/KyberProject.sol": {

      "content": "\n//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ncontract KyberProject {\n    string public name = \"The Kyber Project\";\n\n    address[] public registeredUsers;\n\n\tmapping (address => bool) public check_registration;\n\n    function registerUser(address newUserAddress) public {\n    \trequire(check_registration[newUserAddress] != true, \"USER ALREADY REGISTERED\");\n\n        registeredUsers.push(newUserAddress);\n        check_registration[newUserAddress] = true;\n    }\n\n    function returnUsers() public view returns (address[] memory){\n        return registeredUsers;\n    }\n\n    struct Vote {\n        string articleName;\n        string articleAddress;\n        bool archived;\n    }\n\n    mapping (address => Vote[]) public articlesVotedOn;\n\n    function registerAVote(address _userAddress, string memory _articleName, string memory _articleAddress) public {\n    \trequire(check_registration[_userAddress] == true, \"USER MUST REGISTER FIRST\");\n\n        Vote memory v;\n        v.articleName = _articleName;\n        v.articleAddress = _articleAddress;\n        v.archived = true;\n\n        articlesVotedOn[msg.sender].push(v);\n    }\n\n    function getArticlesVotedOnLength(address _userAddress) public view returns (uint) {\n        require(check_registration[_userAddress] == true, \"USER MUST REGISTER FIRST\");\n        require(articlesVotedOn[_userAddress].length > 0, \"USER SHOULD HAVE VOTED ON AT LEAST ONE ARTICLE\");\n        return articlesVotedOn[_userAddress].length;\n    }\n\n    function getArticlesVoted(address _userAddress, uint _index) public view returns (string memory) {\n        require(check_registration[_userAddress] == true, \"USER MUST REGISTER FIRST\");\n        require(articlesVotedOn[_userAddress].length > 0, \"USER SHOULD HAVE VOTED ON AT LEAST ONE ARTICLE\");\n        return articlesVotedOn[_userAddress][_index].articleAddress;\n    }\n\n    //function getRegisteredUserInfo(address _userAddress) public view returns(address[] memory) {\n        //return articlesVotedOn[_userAddress];\n    //}\n\n    string[] public articleList;\n\n    function getArticlesVotedOn(address userAddress) public returns (string[] memory) {\n        require(check_registration[userAddress] == true, \"USER MUST REGISTER FIRST\");\n        require(articlesVotedOn[userAddress].length > 0, \"USER SHOULD HAVE VOTED ON AT LEAST ONE ARTICLE\");\n\n        Vote[] memory v = articlesVotedOn[userAddress];\n\n        for(uint i = 0; i < v.length; i++) {\n            articleList.push(v[i].articleAddress);\n        }\n\n        return (articleList);\n    }\n\n    /*function getOwnArticlesVotedOn() public view returns (address[] memory) {\n        require(check_registration[msg.sender] != true, \"IS A REGISTERED USER\");\n        require(articlesVotedOn[msg.sender].archived == true, \"HAS VOTED ON AT LEAST ONE ARTICLE\");\n\n        //Need a loop to push articles into and return a tuple\n\n        return articlesVotedOn[msg.sender];\n    }*/\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}